---
title: "Data Wrangling in Numpy"
author: "Bryce Blignaut"
date: "2023-01-02"
categories: [Tutorial]
---
# Data Wrangling in Numpy

![](numpy.png)

Most analysts only use np.array() for their projects, but numpy has a host of numerical functions that will make your life easier.

# What is Numpy Really Used for ?
NumPy is a powerful library in Python used for numerical computing. It provides a wide range of mathematical functions and operations that are optimized for efficiency and performance. In this blog post, we will explore some of the most commonly used NumPy functions with examples.

Numerical expressions can be performed across each value of an array while other data processing like pandas cannot (see function 5). 


## 1. 'numpy.array()'

This function is used to create an array in NumPy. We can pass a list, tuple or any array-like object to create a new NumPy array

```python
import numpy as np

# creating a 1D array
arr1 = np.array([1, 2, 3])
print(arr1)

# creating a 2D array
arr2 = np.array([[1, 2, 3], [4, 5, 6]])
print(arr2)
```
Output:
```python
[1 2 3]
[[1 2 3]
 [4 5 6]]
```
## 2. numpy.arange()
This function is used to create an array with a sequence of numbers. It takes in three arguments: start, stop, and step.

```python
import numpy as np

# creating an array with numbers 0 to 9
arr1 = np.arange(10)
print(arr1)

# creating an array with numbers 1 to 9 in steps of 2
arr2 = np.arange(1, 10, 2)
print(arr2)

```
Output:

```python
[0 1 2 3 4 5 6 7 8 9]
[1 3 5 7 9]

```
## 3. numpy.zeros()
This function is used to create an array filled with zeros. It takes in one argument, which is the shape of the array.

```python
import numpy as np

# creating a 1D array with 5 zeros
arr1 = np.zeros(5)
print(arr1)

# creating a 2D array with 3 rows and 4 columns filled with zeros
arr2 = np.zeros((3, 4))
print(arr2)


```
Output:

```python
[0. 0. 0. 0. 0.]
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]

```
## 4. numpy.ones()
This function is used to create an array filled with ones. It takes in one argument, which is the shape of the array.

```python
import numpy as np

# creating a 1D array with 3 ones
arr1 = np.ones(3)
print(arr1)

# creating a 2D array with 2 rows and 5 columns filled with ones
arr2 = np.ones((2, 5))
print(arr2)


```
Output:

```python
[1. 1. 1.]
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]

```
## 5. numpy.linspace()
This function is used to create an array with a sequence of evenly spaced numbers. It takes in three arguments: start, stop, and the number of elements in the array.

```python
import numpy as np

# creating an array with 5 evenly spaced numbers between 0 and 1
arr1 = np.linspace(0, 1, 5)
print(arr1)

# creating an array with 10 evenly spaced numbers between 1 and 10
arr2 = np.linspace(1, 10,10)
print(arr2)

# functions and expressions can be apply across the entire array
# in this example we added 5 to each value in the array
print(arr2 + 5)


```
Output:

```python
[0.   0.25 0.5  0.75 1. ]
[ 1.  2.  3.  4.  5.  6.  7.  8.  9. 10.]
[ 6.  7.  8.  9. 10. 11. 12. 13. 14. 15.]
```

Hopefully these simple functions will save you time and help you process numbers faster
